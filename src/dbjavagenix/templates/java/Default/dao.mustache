package {{daoPackage}};

import {{entityPackage}}.{{className}};
import org.apache.ibatis.annotations.Param;
{{#hasSpringData}}
import org.springframework.data.domain.Pageable;
{{/hasSpringData}}
import java.util.List;
import org.apache.ibatis.annotations.Mapper;

/**
 * {{comment}}({{tableName}})表数据库访问层
 *
 * @author {{author}}
 * @date {{date}}
 */
@Mapper
public interface {{className}}Dao {

    /**
     * 通过ID查询单条数据
     *
     * @param {{primaryKeyName}} 主键
     * @return 实例对象
     */
    {{className}} queryById({{primaryKeyType}} {{primaryKeyName}});

    /**
     * 查询指定行数据
     *
     * @param {{entityNameLowerCase}} 查询条件
     {{#hasSpringData}}
     * @param pageable 分页对象
     {{/hasSpringData}}
     {{^hasSpringData}}
     * @param offset 偏移量
     * @param limit 限制数量
     {{/hasSpringData}}
     * @return 对象列表
     */
    {{#hasSpringData}}
    List<{{className}}> queryAllByLimit(@Param("entity") {{className}} {{entityNameLowerCase}}, @Param("pageable") Pageable pageable);
    {{/hasSpringData}}
    {{^hasSpringData}}
    List<{{className}}> queryAllByLimit(@Param("entity") {{className}} {{entityNameLowerCase}}, @Param("offset") int offset, @Param("limit") int limit);
    {{/hasSpringData}}

    /**
     * 统计总行数
     *
     * @param {{entityNameLowerCase}} 查询条件
     * @return 总行数
     */
    long count(@Param("entity") {{className}} {{entityNameLowerCase}});

    /**
     * 新增数据
     *
     * @param {{entityNameLowerCase}} 实例对象
     * @return 影响行数
     */
    int insert({{className}} {{entityNameLowerCase}});

    /**
     * 批量新增数据（MyBatis原生foreach方法）
     *
     * @param entities List<{{className}}> 实例对象列表
     * @return 影响行数
     */
    int insertBatch(@Param("entities") List<{{className}}> entities);

    /**
     * 批量新增或按主键更新数据（MyBatis原生foreach方法）
     *
     * @param entities List<{{className}}> 实例对象列表
     * @return 影响行数
     * @throws org.springframework.jdbc.BadSqlGrammarException 入参是空List的时候会抛SQL语句错误的异常，请自行校验入参
     */
    int insertOrUpdateBatch(@Param("entities") List<{{className}}> entities);

    /**
     * 修改数据
     *
     * @param {{entityNameLowerCase}} 实例对象
     * @return 影响行数
     */
    int update({{className}} {{entityNameLowerCase}});

    /**
     * 通过主键删除数据
     *
     * @param {{primaryKeyName}} 主键
     * @return 影响行数
     */
    int deleteById({{primaryKeyType}} {{primaryKeyName}});

}
